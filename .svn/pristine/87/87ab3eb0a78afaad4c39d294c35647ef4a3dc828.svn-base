package gerudok.view;

import gerudok.app.MyJFrame;
import gerudok.model.Page;
import gerudok.model.elements.SlotDevice;
import gerudok.observer.MyObserver;
import gerudok.observer.ObserverEnum;
import gerudok.view.painters.SlotElementPainter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class PageView extends JPanel implements MyObserver {

    private JLabel lblName;
    private Page page;

    ////////////////////
    private DocumentView documentView;

    ///////////////////
    public PageView(Page page, DocumentView docView){
        this.page = page;

        initialiseView();
        ///////////////////
        documentView = docView;
        this.addMouseListener(new MouseController(this));

        page.addObserver(this);

    }

    private void initialiseView(){

        this.setPreferredSize(new Dimension(300,300));

        lblName = new JLabel(page.toString() );
        this.add(lblName);
    }

    public Page getPage() {
        return page;
    }
//////////////////
    @Override
    public void update(Object var1, ObserverEnum changeType) {
        if(var1 instanceof String && changeType.equals(ObserverEnum.NAME_CHANGE)){
            lblName.setText(page.toString());
        }
        else if(var1 instanceof SlotDevice && var1 == ObserverEnum.DRAW){
            repaint();
        }
        MyJFrame.getInstance().revalidate();
        MyJFrame.getInstance().repaint();
    }
//////////////////
    //prolazimo kroz kolekciju grafickih objekata i iscrtavamo ig na panelu
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        for(SlotDevice slotDevice : page.getSlotDevices()) {
            //svaki graficki element ima odgovarajucu painter klasu
            SlotElementPainter slPainter = slotDevice.getSlotPainter();
            //prosledjujemo klasu panela na kome iscrtavamo i graficki elem koji treba iscrtati
            slPainter.paint(g2, slotDevice);
        }
    }
//////////////////////
    private class MouseController extends MouseAdapter{
        private PageView pageView;

        public MouseController(PageView p) {
            pageView = p;
        }

        @Override
        public void mousePressed(MouseEvent e) {
            documentView.setFocusPage(pageView, e);
            if(page.getManagerState().getCurrentState() == null)
                return;
            page.getManagerState().getCurrentState().mousePressed(e);
        }

    }



}
