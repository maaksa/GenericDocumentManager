package gerudok.model;

import gerudok.model.workspace.Workspace;
import gerudok.observer.MyObservable;
import gerudok.observer.MyObserver;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

public class Project extends DefaultMutableTreeNode implements MyObservable {

    private String name;
    private Workspace parent;
    private List<Document> documents;
    private List<MyObserver> observers;

    public Project(String name, Workspace parent){
        super();
        this.parent = parent;
        this.name = name;
        documents = new ArrayList<>();
    }

    @Override
    public String toString() {
        return this.name;
    }

    public void addDocument(Document document){
        documents.add(document);
        document.setName( this.name + " - Dokument - " + documents.size());
    }

    public void removeDocument(Document document){
        documents.remove(document);
        notifyObservers(document);
    }

    public void setName(String name){
        this.name = name;
        notifyObservers(name);
    }

    public List<Document> getDocuments() {
        return documents;
    }

    public Document getDocument(int arg0){
        return documents.get(arg0);
    }

    public int getDocumentsCount(){
        return documents.size();
    }

    public int getDocumentIndex(Document arg0){
        return documents.indexOf(arg0);
    }

    public TreeNode getChildAt(int arg0) {
        return getDocument(arg0);
    }

    public int getChildCount() {
        return getDocumentsCount();
    }

    public TreeNode getParent() {
        return parent;
    }

    public int getIndex(TreeNode arg0) {
        return getDocumentIndex((Document) arg0);
    }

    public boolean getAllowsChildren() {
        return true;
    }

    public boolean isLeaf() {
        return false;
    }

    public Enumeration<TreeNode> children() {
        return (Enumeration<TreeNode>) documents;
    }

    @Override
    public void addObserver(MyObserver var1) {
        if(observers == null){
            observers = new ArrayList<>();
        }
        if(var1 != null && !observers.contains(var1)){
            observers.add(var1);
        }
    }

    @Override
    public void removeObserver(MyObserver var1) {
        if(var1 != null && observers != null){
            observers.remove(var1);
        }
    }

    @Override
    public void notifyObservers(Object var1) {
        if(observers != null){
            for (MyObserver observer : observers) {
                observer.update(var1);
            }
        }
    }
}
