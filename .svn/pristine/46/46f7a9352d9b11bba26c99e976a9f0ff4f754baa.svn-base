package gerudok.state;

import gerudok.model.Page;
import gerudok.model.elements.SlotDevice;
import gerudok.view.painters.handle.HandleEnum;

import java.awt.*;
import java.awt.event.MouseEvent;

public class ResizeState extends State {

    Page mediator;
    HandleEnum handleEnum;

    public ResizeState(Page page){
        mediator = page;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        SlotDevice selected = null;
        for (SlotDevice slotDevice: mediator.getSlotDevices()) {
            if(slotDevice.getSlotPainter().isElementAt(e.getPoint())){
                selected = slotDevice;
                break;
            }
        }
        mediator.setSelectedSlotDevice(selected);
        return;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if(mediator.getSelectedSlotDevice() == null || handleEnum == null){
            return;
        }
        SlotDevice tmp = mediator.getSelectedSlotDevice();
        mediator.getSlotDevices().remove(tmp);

        Dimension currSize = tmp.getSize();
        Point point = e.getPoint();

        Point position = (Point) tmp.getPosition();
        switch (handleEnum){
            case SOUTH_WEST:
                tmp.setSize(new Dimension(currSize.width + position.x - point.x,
                        point.y - position.y));
                tmp.setPosition(new Point(point.x, position.y));
                break;
            case SOUTH:
                tmp.setSize(new Dimension(currSize.width, point.y - position.y));
                tmp.setPosition(position);
                break;
            case SOUTH_EAST:
                tmp.setSize(new Dimension(point.x - position.x, point.y - position.y));
                tmp.setPosition(position);
                break;
            case EAST:
                tmp.setSize(new Dimension(point.x - position.x, currSize.height));
                tmp.setPosition(position);
                break;
            case NORTH_EAST:
                tmp.setSize(new Dimension(point.x - position.x, currSize.height + position.y - point.y));
                tmp.setPosition(new Point(position.x, point.y));
                break;
            case NORTH:
                tmp.setSize(new Dimension(currSize.width, currSize.height + position.y - point.y));
                tmp.setPosition(new Point(position.x, point.y));
                System.out.println("North" + tmp.getPosition());
                break;
            case NORTH_WEST:
                tmp.setSize(new Dimension(currSize.width + position.x - point.x,
                        currSize.height + position.y - point.y));
                tmp.setPosition(point);
                break;
            case WEST:
                tmp.setSize(new Dimension(currSize.width + position.x - point.x, currSize.height));
                tmp.setPosition(new Point(point.x, position.y));
                break;
        }
        mediator.addSlotDevice(tmp);
    }

/*
    @Override
    public void mouseDragged(MouseEvent e) {
        if(mediator.getSelectedSlotDevice() == null || handleEnum == null){
            return;
        }
        SlotDevice tmp1 = mediator.getSelectedSlotDevice();
        mediator.getSlotDevices().remove(tmp1);

        RectangleElement tmp = new RectangleElement(tmp1.getPosition(), tmp1.getSize(), tmp1.getStroke(),tmp1.getPaint(), tmp1.getAngle());
        Point point = e.getPoint();

        Point pointNW = ((RectangleElement)tmp).getPoints().get(PositionEnum.NW);
        Point pointNE = ((RectangleElement)tmp).getPoints().get(PositionEnum.NE);
        Point pointSW = ((RectangleElement)tmp).getPoints().get(PositionEnum.SW);
        Point pointSE = ((RectangleElement)tmp).getPoints().get(PositionEnum.SE);


        switch (handleEnum){
            case SOUTH_WEST:
                pointSW.setLocation(point.getX(), point.getY());
                pointNW.setLocation( point.getX(), pointNW.getY());
                pointSE.setLocation(pointSE.getX(), point.getY());
                break;
            case SOUTH:
                pointSW.setLocation(pointSW.getX(), point.getY());
                pointSE.setLocation(pointSE.getX(), point.getY());
                break;
            case SOUTH_EAST:
                pointSE.setLocation(point.getX(), point.getY());
                pointSW.setLocation(pointSW.getX(), point.getY());
                pointNE.setLocation(point.getX(), pointNE.getY());
                break;
            case EAST:
                pointNE.setLocation(point.getX(), pointNE.getY());
                pointSE.setLocation(point.getX(), pointSE.getY());
                break;
            case NORTH_EAST:
                pointNE.setLocation(point.getX(), point.getY());
                pointSE.setLocation(point.getX(), pointSE.getY());
                pointNW.setLocation(pointNW.getX(), point.getY());
                break;
            case NORTH:
                pointNE.setLocation(pointNE.getX(), point.getY());
                pointNW.setLocation(pointNW.getX(), point.getY());
                System.out.println("North" + tmp.getPosition());
                break;
            case NORTH_WEST:
                pointNW.setLocation(point.getX(), point.getY());
                pointNE.setLocation(pointNE.getX(), point.getY());
                pointSW.setLocation(point.getX(), pointSW.getY());
                break;
            case WEST:
                pointNW.setLocation(point.getX(), pointNW.getY());
                pointSW.setLocation(point.getX(), pointSW.getY());
                break;
        }
        tmp.setPosition(pointNW);
        tmp.setSize(new Dimension((int)(pointNE.getX() - pointNW.getX()),(int) (pointSW.getY() - pointNW.getY())));
        tmp1 = new RectangleElement(tmp.getPosition(), tmp.getSize(), tmp.getStroke(),tmp.getPaint(),tmp1.getAngle());
        tmp1.setPosition(tmp.getPosition());

        mediator.addSlotDevice(tmp1);
        mediator.setSelectedSlotDevice(tmp1);

    }


 */
    @Override
    public void mouseReleased(MouseEvent e) {

    }

    public HandleEnum getHandleEnum() {
        return handleEnum;
    }

    public void setHandleEnum(HandleEnum handleEnum) {
        this.handleEnum = handleEnum;
    }
}
