package gerudok.model;

import gerudok.model.workspace.Workspace;
import gerudok.observer.MyObservable;
import gerudok.observer.MyObserver;
import gerudok.observer.ObserverEnum;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

public class Project extends DefaultMutableTreeNode implements MyObservable {

    private String name;
    private List<Document> documents;
    private List<MyObserver> observers;

    public Project(String name){
        super();
        this.name = name;
        documents = new ArrayList<>();
    }

    @Override
    public String toString() {
        return this.name;
    }

    @Override
    public void add(MutableTreeNode newChild){
        if(documents == null){
            documents = new ArrayList<>();
        }
        if(newChild != null && newChild instanceof Document && !documents.contains((Document) newChild)){
            Document document = (Document) newChild;
            documents.add(document);
            document.setName("Dokument - " + this.documents.size());
            super.add(newChild);
            notifyObservers(document, ObserverEnum.ADD);
        }
    }

    public void setName(String name){
        this.name = name;
        notifyObservers(name, ObserverEnum.NAME_CHANGE);
    }

    public void removeDocument(Document document){
        notifyObservers(document, ObserverEnum.REMOVE);
        super.remove(document);
        documents.remove(document);
    }

    public Document getDocument(int arg0){
        return documents.get(arg0);
    }

    @Override
    public void addObserver(MyObserver var1) {
        if(observers == null){
            observers = new ArrayList<>();
        }
        if(var1 != null && !observers.contains(var1)){
            observers.add(var1);
        }
    }

    @Override
    public void removeObserver(MyObserver var1) {
        if(var1 != null && observers != null){
            observers.remove(var1);
        }
    }

    @Override
    public void notifyObservers(Object var1, ObserverEnum changeType) {
        if(observers != null){
            for (MyObserver observer : observers) {
                observer.update(var1, changeType);
            }
        }
    }
}
