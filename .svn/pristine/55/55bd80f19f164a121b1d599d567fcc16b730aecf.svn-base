package gerudok.model;

import gerudok.app.MyJFrame;
import gerudok.errorhandler.ExceptionEnum;
import gerudok.eventobserver.UpdateObservable;
import gerudok.eventobserver.UpdateObserver;
import gerudok.observer.MyObservable;
import gerudok.observer.MyObserver;
import gerudok.observer.ObserverEnum;

import javax.swing.tree.DefaultMutableTreeNode;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class Page extends DefaultMutableTreeNode implements MyObservable, UpdateObservable, Serializable {

    private String name;
    private transient List<MyObserver> observers;
    private transient List<UpdateObserver> updateObservers;


    public Page(String name){
        this.name = name;
    }


    @Override
    public String toString() {
        return name;
    }

    //koristi se kada korisnik postavlja ime zbog handle-ovanja error message-a
    public void renamePage(String name){
        if(name == null || name.isEmpty()){
            MyJFrame.getInstance().getErrorHandler().generateError(ExceptionEnum.NODE_RENAME_EMPTY);
            return;
        }
        //ako ne postoji postavlja ime
        if(checkIfNameExists(name) == false) {
            this.name = name;
            notifyObservers(name, ObserverEnum.NAME_CHANGE);
            fireUpdatePerformed(name);
        } else{
            MyJFrame.getInstance().getErrorHandler().generateError(ExceptionEnum.NODE_SAME_NAME);
            return;
        }
    }

    //koristim kada ja setujem ime
    public void setName(String name){

        if(name == null || name.isEmpty()) {
            return;
        }
        //ako ne postoji postavlja ime
        int sameNameCounter = 1;
        while (checkIfNameExists(name)){
            if(sameNameCounter == 1){
                name = name + " - " + ++sameNameCounter;
                continue;
            }
            name = name.substring(0, name.indexOf('-')) + "- " + ++sameNameCounter;
        }
        this.name = name;
        notifyObservers(name, ObserverEnum.NAME_CHANGE);
        fireUpdatePerformed(name);
    }

    //proverava da li ime vec postoji u istom dokumentu
    private boolean checkIfNameExists(String name) {
        Document document = (Document) this.getParent();
        List<Page> pages = document.getPages();
        for (Page p : pages) {
            if (p.toString().equals(name) && !p.equals(this)) {
                return true;
            }
        }
        return false;
    }


    @Override
    public void addObserver(MyObserver var1) {
        if(observers == null){
            observers = new ArrayList<>();
        }
        if(var1 != null && !observers.contains(var1)){
            observers.add(var1);
        }
    }

    @Override
    public void removeObserver(MyObserver var1) {
        if(var1 != null && observers != null){
            observers.remove(var1);
        }
    }

    @Override
    public void notifyObservers(Object var1, ObserverEnum changeType) {
        if(observers != null && !observers.isEmpty()){
            for (MyObserver observer : observers) {
                observer.update(var1, changeType);
            }
        }
    }

    public void fireUpdatePerformed(Object o) {
        if(updateObservers != null && !updateObservers.isEmpty()){
            for (UpdateObserver updateObserver : updateObservers) {
                updateObserver.updatePerformed(o);
            }
        }
    }

    @Override
    public void addUpdateObserver(UpdateObserver updateObserver) {
        if(updateObservers == null){
            updateObservers = new ArrayList<>();
        }
        if(updateObserver != null && !updateObservers.contains(updateObserver)){
            updateObservers.add(updateObserver);
        }
    }

    @Override
    public void removeUpdateObserver(UpdateObserver updateObserver) {
        if(updateObserver != null && updateObservers != null && !updateObservers.isEmpty()){
            updateObservers.remove(updateObserver);
        }
    }
}
