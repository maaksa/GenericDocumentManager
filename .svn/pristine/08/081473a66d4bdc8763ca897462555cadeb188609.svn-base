package gerudok.view;

import gerudok.app.MyJFrame;
import gerudok.model.Document;
import gerudok.model.Page;
import gerudok.model.Project;
import gerudok.observer.MyObserver;
import gerudok.observer.ObserverEnum;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class DocumentView extends JPanel implements MyObserver {

    private Document document;
    private List<PageView> pageViewList;

    /////////////////
    private PageView pageFocus = null;

    private JLabel labelName;

    public DocumentView(Document document) {

        super();

        this.document = document;
        document.addObserver(this);
        pageViewList = new ArrayList<>();

        labelName = new JLabel(this.document.toString());
        labelName.setPreferredSize(new Dimension(100,20));

        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
        setPreferredSize(new Dimension(400, 400));

        String name = new String(this.document.toString());
        setName(name);

        initialisePageViews();
    }

    private void initialisePageViews() {
        if(pageViewList == null){
            pageViewList = new ArrayList<>();
        }

        this.removeAll();
        pageViewList.clear();

        int n = this.document.getChildCount();
        for (int i = 0; i < n; i++) {
            Page page = this.document.getPage(i);
            initialisePageView(page);
        }
        MyJFrame.getInstance().revalidate();
    }

    public Document getDocument() {
        return document;
    }

    public JLabel getLabelName() {
        return labelName;
    }

    @Override
    public void update(Object var1, ObserverEnum changeType) {
        if(var1 instanceof String && changeType == ObserverEnum.NAME_CHANGE){
            this.labelName.setText((String)var1);

        }else if(var1 instanceof Page){

            Page page = (Page)var1;

            if(changeType == ObserverEnum.REMOVE){
                Iterator i = pageViewList.iterator();

                while(i.hasNext()) {
                    PageView pageView = (PageView) i.next();

                    if(pageView.getPage().equals(page)){
                        i.remove();
                        this.remove(pageView);
                    }
                }
            }else if(changeType == ObserverEnum.ADD){
                initialisePageView(page);
            }
            ///////////////////
            else if(ObserverEnum.DRAW == changeType){
                PageView pageView = new PageView(page, this);
                pageViewList.add(pageView);
                this.add(pageView);
                pageFocus = pageView;
            }
        }
        MyJFrame.getInstance().revalidate();
    }

    public void initialisePageView(Page page) {
        if(pageViewList == null){
            pageViewList = new ArrayList<>();
        }
        PageView pageView = new PageView(page, this);
        this.pageViewList.add(pageView);
        this.add(pageView);

        MyJFrame.getInstance().revalidate();
    }
///////////
    public void setFocusPage(PageView fp, MouseEvent e) {
        this.pageFocus = fp;
    }
////////////////
    public PageView getFocusPage() {
        return pageFocus;
    }
}
