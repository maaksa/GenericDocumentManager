package gerudok.model;

import gerudok.observer.MyObservable;
import gerudok.observer.MyObserver;
import gerudok.observer.ObserverEnum;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import java.util.ArrayList;
import java.util.List;

public class Document extends DefaultMutableTreeNode implements MyObservable {

    private List<MyObserver> observers;
    private List<Page> pages;
    private String name;

    public Document(String name){
        super();
        this.name = name;
        pages = new ArrayList<>();
    }


    @Override
    public String toString() {
        return this.name;
    }

    @Override
    public void add(MutableTreeNode newChild){
        if(pages == null){
            pages = new ArrayList<>();
        }
        if(newChild != null && newChild instanceof Page && !pages.contains((Page)newChild)){
            Page page = (Page)newChild;
            pages.add(page);
            super.add(newChild);
            page.setName("Stranica - " + this.pages.size());
            notifyObservers(page, ObserverEnum.ADD);
        }
    }

    public void removePage(Page page){
        pages.remove(page);
        super.remove(page);
        notifyObservers(page, ObserverEnum.REMOVE);
    }

    public void setName(String name){
        this.name = name;
        notifyObservers(name, ObserverEnum.NAME_CHANGE);
    }

    public List<Page> getPages() {
        return pages;
    }

    public String getName() {
        return name;
    }

    public Page getPage(int arg0){
        return pages.get(arg0);
    }

    public int getPagesCount(){
        return pages.size();
    }

    public int getPageIndex(Page arg0){
        return pages.indexOf(arg0);
    }


    @Override
    public void addObserver(MyObserver var1) {
        if(observers == null){
            observers = new ArrayList<>();
        }
        if(var1 != null && !observers.contains(var1)){
            observers.add(var1);
        }
    }

    @Override
    public void removeObserver(MyObserver var1) {
        if(var1 != null && observers != null){
            observers.remove(var1);
        }
    }

    @Override
    public void notifyObservers(Object var1, ObserverEnum changeType) {
        if(observers != null){
            for (MyObserver observer : observers) {
                observer.update(var1, changeType);
            }
        }
    }
}
