package gerudok.model.workspace;

import gerudok.eventobserver.UpdateObserver;
import gerudok.model.Project;
import gerudok.observer.MyObservable;
import gerudok.observer.MyObserver;
import gerudok.observer.ObserverEnum;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class Workspace extends DefaultMutableTreeNode implements MyObservable, Serializable {

    private List<Project> projects;
    private transient List<MyObserver> observers;
    private File workspaceFile;

    public Workspace(){
        super();
        projects = new ArrayList<>();
        workspaceFile = null;
    }

    @Override
    public void add(MutableTreeNode newChild){
        if(projects == null){
            projects = new ArrayList<>();
        }
        if(newChild instanceof Project) {
            Project project = (Project) newChild;
            if (!projects.contains(project)) {
                projects.add(project);
                super.add(project);

                project.setName(project.toString());
                notifyObservers(project, ObserverEnum.ADD);

            }
        }
    }

    public void removeProject(Project project){
        if(project != null && projects != null && !projects.isEmpty()){
            notifyObservers(project, ObserverEnum.REMOVE);
            projects.remove(project);
            super.remove(project);
        }
    }

    public List<Project> getProjects() {
        return projects;
    }

    public String toString(){
        return "Workspace";
    }

    @Override
    public void addObserver(MyObserver var1) {
        if(observers == null){
            observers = new ArrayList<>();
        }
        if(var1 != null && !observers.contains(var1)){
            observers.add(var1);
        }
    }

    @Override
    public void removeObserver(MyObserver var1) {
        if(observers != null && !observers.isEmpty() && var1 != null){
            observers.remove(var1);
        }
    }

    @Override
    public void notifyObservers(Object var1, ObserverEnum changeType) {
        if(observers != null && !observers.isEmpty()){
            for (MyObserver observer : observers) {
                observer.update(var1, changeType);
            }
        }
    }

    public File getWorkspaceFile(){
        return workspaceFile;
    }

    public void setWorkspaceFile(File workspaceFile) {
        this.workspaceFile = workspaceFile;
    }

    public int getProjectCount(){
        return projects.size();
    }

    public Project getProject(int i){
        return projects.get(i);
    }

}
